type tilt { 
    _id: [_id] @relationship(type: "has__id", direction: OUT)
    meta: [meta] @relationship(type: "has_meta", direction: OUT)
    controller: [controller] @relationship(type: "has_controller", direction: OUT)
    dataProtectionOfficer: [dataProtectionOfficer] @relationship(type: "has_dataProtectionOfficer", direction: OUT) 
    dataDisclosed: [dataDisclosed] @relationship(type: "has_dataDisclosed", direction: OUT)
    changesOfPurpose: [changesOfPurpose] @relationship(type: "has_changesOfPurpose", direction: OUT)
    automatedDecisionMaking: [automatedDecisionMaking] @relationship(type: "has_automatedDecisionMaking", direction: OUT)
    rightToComplain: [rightToComplain] @relationship(type: "has_rightToComplain", direction: OUT)
    rightToDataPortability: [rightToDataPortability] @relationship(type: "has_rightToDataPortability", direction: OUT)
    rightToWithdrawConsent: [rightToWithdrawConsent] @relationship(type: "has_rightToWithdrawConsent", direction: OUT)
    rightToRectificationOrDeletion: [rightToRectificationOrDeletion] @relationship(type: "has_rightToRectificationOrDeletion", direction: OUT)
    rightToInformation: [rightToInformation] @relationship(type: "has_rightToInformation", direction: OUT)
    sources: [sources] @relationship(type: "has_sources", direction: OUT)
    accessAndDataPortability: [accessAndDataPortability] @relationship(type: "has_accessAndDataPortability", direction: OUT)
    thirdCountryTransfers: [thirdCountryTransfers] @relationship(type: "has_thirdCountryTransfers", direction: OUT)
    _etag: [_etag] @relationship(type: "has__etag", direction: OUT)
    _comment: String
}

type meta {
    _id: String
    name: String
    created: String
    modified: String
    version: String
    language: String
    status: String
    url: String
    _hash: String
    metaOf: [tilt] @relationship(type: "has_meta", direction: IN)
    _comment: String
}

type controller {
    name: String
    division: String
    address: String
    country: String
    controllerOf:[tilt] @relationship(type: "has_controller", direction: IN)
    representative: [representative] @relationship(type: "has_representative", direction: OUT)
    sector: String
    _comment: String
}


union representativeOf = controller | recipients

type representative {
      name: String
      email: String
      phone: String
      address: String
      representativeOf: [representativeOf] @relationship(type: "has_representative", direction: IN)
      _comment: String
      contact_form: String
}

type dataProtectionOfficer {
    name: String
    address: String
    country: String
    email: String
    phone: String
    url: String
    officerOf:[tilt] @relationship(type: "has_dataProtectionOfficer", direction: IN)
    _comment: String
  }


type dataDisclosed {
    _id: String
    category: String
    dataDisclosedOf:[tilt] @relationship(type: "has_dataDisclosed", direction: IN)
    purposes: [purposes] @relationship(type: "has_purpose", direction: OUT)
    legalBases: [legalBases] @relationship(type: "has_legalBase", direction: OUT)
    legitimateInterests: [legitimateInterests] @relationship(type: "has_legitimateInterest", direction: OUT)
    recipients: [recipients] @relationship(type: "has_recipients", direction: OUT)
    nonDisclosure: [nonDisclosure] @relationship(type: "has_nonDisclosure", direction: OUT)
    storage: [storage] @relationship(type: "has_storage", direction: OUT)
    subcategories: [String]
    description: String
    supercategory: String
    _comment: String
}

type purposes {
    purpose: String
    description: String
    purposeOf: [dataDisclosed] @relationship(type: "has_purpose", direction: IN)
    _comment: String
}

type legalBases {
    reference: String
    description: String
    legalBasesOf: [dataDisclosed] @relationship(type: "has_legalBases", direction: IN)
    _comment: String
}

type legitimateInterests {
    exists: String
    reasoning: String
    legitimateInterestOf: [dataDisclosed] @relationship(type: "has_legitimateInterest", direction: IN)
    _comment: String
}

## does it make sense to make these the same type as a[meta]object? 
type recipients {
    name: String
    division: String
    address: String
    country: String
    recipientsOf: [dataDisclosed] @relationship(type: "has_recipients", direction: IN)
    representative: [representative] @relationship(type: "has_representative", direction: OUT)
    email: String
    phone: String
    category: String
    _comment: String
}

type changesOfPurpose {
    description: String
    plannedDateOfChange: String
    urlOfNewVersion: String
    affectedDataCategories: [String]
    changesOfPurposeOf: [tilt] @relationship(type: "has_changesOfPurpose", direction: IN)
    _comment: String
}

type automatedDecisionMaking {
    inUse: String
    logicInvolved: String
    scopeAndIntendedEffects: String
    automatedDecisionMakingOf: [tilt] @relationship(type: "has_automatedDecisionMaking", direction: IN)
    _comment: String
}

type supervisoryAuthority {
    name: String
    address: String
    country: String
    email: String
    phone: String
    url: String
    supervisoryAuthorityOf: [rightToComplain] @relationship(type: "has_supervisoryAuthority", direction: IN)
    _comment: String
}
type rightToComplain {
    available: String
    description: String
    url: String
    email: String
    rightToComplainOf:[tilt] @relationship(type: "has_rightToComplain", direction: IN)
    supervisoryAuthority: [supervisoryAuthority] @relationship(type: "has_supervisoryAuthority", direction: OUT)
    identificationEvidences: [String]
    _comment: String
}
type rightToWithdrawConsent {
    rightToWithdrawConsentOf:[tilt] @relationship(type: "has_rightToWithdrawConsent", direction: IN)
    available: String
    description: String
    url: String
    email: String
    identificationEvidences: [String]
    _comment: String
}
type rightToDataPortability {
    rightToDataPortabilityOf:[tilt] @relationship(type: "has_rightToDataPortability", direction: IN)
    available: String
    description: String
    url: String
    email: String
    identificationEvidences: [String]
    _comment: String
}
type rightToRectificationOrDeletion {
    rightToRectificationOrDeletionOf:[tilt] @relationship(type: "has_rightToRectificationOrDeletion", direction: IN)
    available: String
    description: String
    url: String
    email: String
    identificationEvidences: [String]
    _comment: String
}
type rightToInformation {
    rightToInformationOf:[tilt] @relationship(type: "has_rightToInformation", direction: IN)
    available: String
    description: String
    url: String
    email: String
    identificationEvidences: [String]
    _comment: String
}
type sources {
    _id: String
    dataCategory: String
    category: String 
    description: String
    url: String
    publiclyAvailable: String
    sources: [sources] @relationship(type: "has_sources", direction: OUT)
    sourcesFor:[tilt] @relationship(type: "has_sources", direction: IN)
    _comment: String
}

type administrativeFee {
    amount: String
    currency: String
    administrativeFeeOf: [accessAndDataPortability] @relationship(type: "has_administrativeFee", direction: IN)
    _comment: String
}

type accessAndDataPortability {
    accessAndDataPortabilityOf:[tilt] @relationship(type: "has_accessAndDataPortability", direction: IN)
    available: String
    description: String
    url: String
    email: String
    dataFormats: [String]
    administrativeFee: [administrativeFee] @relationship(type: "has_administrativeFee", direction: OUT)
    identificationEvidences: [String]
    _comment: String
}
type standardDataProtectionClause {
    available: String
    description: String
    standardDataProtectionClauseOf: [thirdCountryTransfers] @relationship(type: "has_standardDataProtectionClause", direction: IN)
    _comment: String
}
type presenceOfEnforceableRightsAndEffectiveRemedies {
    presenceOfEnforceableRightsAndEffectiveRemediesOf: [thirdCountryTransfers] @relationship(type: "has_presenceOfEnforceableRightsAndEffectiveRemedies", direction: IN)
    available: String
    description: String
    _comment: String
}
type appropriateGuarantees {
    appropriateGuaranteesOf: [thirdCountryTransfers] @relationship(type: "has_appropriateGuarantees", direction: IN)
    available: String
    description: String
    _comment: String
}
type adequacyDecision {
    adequacyDecision: [thirdCountryTransfers] @relationship(type: "has_adequacyDecision", direction: IN)
    available: String
    description: String
    _comment: String
}
type thirdCountryTransfers {
    country: String
    thirdCountryTransfersOf: [tilt] @relationship(type: "has_thirdCountryTransfers", direction: IN)
    standardDataProtectionClause: [standardDataProtectionClause] @relationship(type: "has_standardDataProtectionClause", direction: OUT)
    presenceOfEnforceableRightsAndEffectiveRemedies: [presenceOfEnforceableRightsAndEffectiveRemedies] @relationship(type: "has_presenceOfEnforceableRightsAndEffectiveRemedies", direction: OUT)
    appropriateGuarantees: [appropriateGuarantees] @relationship(type: "has_appropriateGuarantees", direction: OUT)
    adequacyDecision: [adequacyDecision] @relationship(type: "has_adequacyDecision", direction: OUT)
    _comment: String
}
type nonDisclosure {
    nonDisclosureOf: [dataDisclosed] @relationship(type: "has_nonDisclosure", direction: IN)
    legalRequirement: String
    contractualRegulation: String
    obligationToProvide: String
    consequences: String
    _comment: String
}
type temporal {
    temporal: storage @relationship(type: "has_temporal", direction: IN)
    description: String
    ttl: String
    _comment: String
}
type storage {
    storageOf: [dataDisclosed] @relationship(type: "has_storage", direction: IN)
    temporal: [temporal] @relationship(type: "has_temporal", direction: OUT)
    aggregationFunction: String
    description: String
    legalBasisConditional: [String]
    purposeConditional: [String]
    _comment: String
}

type _id {
    oid: String
}

type _etag {
    oid: String
}