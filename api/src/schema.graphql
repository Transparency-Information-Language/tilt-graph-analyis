type meta {
    _id: String
    name: String
    created: String
    modified: String
    version: String
    language: String
    status: String
    url: String
    _hash: String
    controlledBy: [controller] @relationship(type: "has_controller", direction: OUT)
    officer: [dataProtectionOfficer] @relationship(type: "has_dataProtectionOfficer", direction: OUT) 
    dataDisclosed: [dataDisclosed] @relationship(type: "has_dataDisclosed", direction: OUT)
    changesOfPurposes: changesOfPurpose @relationship(type: "has_changesOfPurpose", direction: OUT)
    automatedDecisionMaking: automatedDecisionMaking @relationship(type: "has_automatedDecisionMaking", direction: OUT)
    rightToComplain: rightToComplain @relationship(type: "has_rightToComplain", direction: OUT)
    rightToDataPortability: rightToDataPortability @relationship(type: "has_rightToDataPortability", direction: OUT)
    rightToWithdrawConsent: rightToWithdrawConsent @relationship(type: "has_rightToWithdrawConsent", direction: OUT)
    rightToRectificationOrDeletion: rightToRectificationOrDeletion @relationship(type: "has_rightToRectificationOrDeletion", direction: OUT)
    rightToInformation: rightToInformation @relationship(type: "has_rightToInformation", direction: OUT)
    sourcesFrom: sources @relationship(type: "has_sources", direction: OUT)
    accessAndDataPortability: accessAndDataPortability @relationship(type: "has_accessAndDataPortability", direction: OUT)
}

type controller {
    name: String
    division: String
    address: String
    country: String
    controllOf: meta @relationship(type: "has_controller", direction: IN)
    representatedBy: [representative] @relationship(type: "has_representative", direction: OUT)
}


union representativeOf = controller | recipient

type representative {
      name: String
      email: String
      phone: String
      representativeOf: representativeOf @relationship(type: "has_representative", direction: IN)
}

type dataProtectionOfficer {
    name: String
    address: String
    country: String
    email: String
    phone: String
    officerOf: meta @relationship(type: "has_dataProtectionOfficer", direction: IN)
  }


type dataDisclosed {
    _id: String
    category: String
    dataDisclosedOf: meta @relationship(type: "has_dataDisclosed", direction: IN)
    purposes: [purpose] @relationship(type: "has_purpose", direction: OUT)
    legalBases: [legalBase] @relationship(type: "has_legalBase", direction: OUT)
    legitimateInterests: [legitimateInterest] @relationship(type: "has_legitimateInterest", direction: OUT)
    recipients: [recipient] @relationship(type: "has_recipient", direction: OUT)
    nonDisclosures: nonDisclosure @relationship(type: "has_nonDisclosure", direction: OUT)
    storageOf: storage @relationship(type: "has_storage", direction: OUT)
}

type purpose {
    purpose: String
    description: String
    purposeOf: [dataDisclosed] @relationship(type: "has_purpose", direction: IN)
}

type legalBase {
    reference: String
    description: String
    legalBaseOf: [dataDisclosed] @relationship(type: "has_legalBase", direction: IN)
}

type legitimateInterest {
    exists: String
    reasoning: String
    legitimateInterestOf: [dataDisclosed] @relationship(type: "has_legitimateInterest", direction: IN)
}

## does it make sense to make these the same type as a meta object? 
type recipient {
    name: String
    division: String
    address: String
    country: String
    recipientOf: [dataDisclosed] @relationship(type: "has_recipient", direction: IN)
    representative: [representative] @relationship(type: "has_representative", direction: OUT)
    name: String
    email: String
    phone: String
}

type changesOfPurpose {
    description: String
    plannedDateOfChange: String
    urlOfNewVersion: String
    affectedDataCategories: [String]
    changesOfPurposeOf: meta @relationship(type: "has_changesOfPurpose", direction: IN)
}

type automatedDecisionMaking {
    inUse: Boolean
    logicInvolved: String
    scopeAndIntendedEffects: String
    automatedDecisionMakingOf: meta @relationship(type: "has_automatedDecisionMaking", direction: IN)
}

type supervisoryAuthority {
    name: String
    address: String
    country: String
    email: String
    phone: String
    supervisoryAuthorityOf: [rightToComplain] @relationship(type: "has_supervisoryAuthority", direction: IN)
}
type rightToComplain {
    available: Boolean
    description: String
    url: String
    email: String
    rightToComplainOf: meta @relationship(type: "has_rightToComplain", direction: IN)
    supervisoryAuthority: supervisoryAuthority @relationship(type: "has_supervisoryAuthority", direction: OUT)
    identificationEvidences: [String]
}
type rightToWithdrawConsent {
    rightToWithdrawConsentOf: meta @relationship(type: "has_rightToWithdrawConsent", direction: IN)
    available: Boolean
    description: String
    url: String
    email: String
    identificationEvidences: [String]
}
type rightToDataPortability {
    rightToDataPortabilityOf: meta @relationship(type: "has_rightToDataPortability", direction: IN)
    available: Boolean
    description: String
    url: String
    email: String
    identificationEvidences: [String]
}
type rightToRectificationOrDeletion {
    rightToRectificationOrDeletionOf: meta @relationship(type: "has_rightToRectificationOrDeletion", direction: IN)
    available: Boolean
    description: String
    url: String
    email: String
    identificationEvidences: [String]
}
type rightToInformation {
    rightToInformationOf: meta @relationship(type: "has_rightToInformation", direction: IN)
    available: Boolean
    description: String
    url: String
    email: String
    identificationEvidences: [String]
}
type sources {
    description: String
    url: String
    publiclyAvailable: Boolean
    sourcesFor: meta @relationship(type: "has_sources", direction: IN)
}

type administrativeFee {
    amount: Int
    currency: String
    administrativeFeeOf: accessAndDataPortability @relationship(type: "has_administrativeFee", direction: IN)
}

type accessAndDataPortability {
    accessAndDataPortabilityOf: meta @relationship(type: "has_accessAndDataPortability", direction: IN)
    available: Boolean
    description: String
    url: String
    email: String
    dataFormats: [String]
    administrativeFee: administrativeFee @relationship(type: "has_administrativeFee", direction: OUT)
    identificationEvidences: [String]
}
type standardDataProtectionClause {
    available: Boolean
    description: String
    standardDataProtectionClauseOf: thirdCountryTransfer @relationship(type: "has_standardDataProtectionClause", direction: IN)
}
type presenceOfEnforceableRightsAndEffectiveRemedies {
    presenceOfEnforceableRightsAndEffectiveRemediesOf: thirdCountryTransfer @relationship(type: "has_presenceOfEnforceableRightsAndEffectiveRemedies", direction: IN)
    available: Boolean
    description: String
}
type appropriateGuarantees {
    appropriateGuaranteesOf: thirdCountryTransfer @relationship(type: "has_appropriateGuarantees", direction: IN)
    available: Boolean
    description: String
}
type adequacyDecision {
    adequacyDecision: thirdCountryTransfer @relationship(type: "has_adequacyDecision", direction: IN)
    available: Boolean
    description: String
}
type thirdCountryTransfer {
    country: String
    standardDataProtectionClause: standardDataProtectionClause @relationship(type: "has_standardDataProtectionClause", direction: OUT)
    presenceOfEnforceableRightsAndEffectiveRemedies: presenceOfEnforceableRightsAndEffectiveRemedies @relationship(type: "has_presenceOfEnforceableRightsAndEffectiveRemedies", direction: OUT)
    appropriateGuarantees: appropriateGuarantees @relationship(type: "has_appropriateGuarantees", direction: OUT)
    adequacyDecision: adequacyDecision @relationship(type: "has_adequacyDecision", direction: OUT)
}
type nonDisclosure {
    nonDisclosureOf: dataDisclosed @relationship(type: "has_nonDisclosure", direction: IN)
    legalRequirement: Boolean
    contractualRegulation: Boolean
    obligationToProvide: Boolean
    consequences: String
}
type temporal {
    temporal: storage @relationship(type: "has_temporal", direction: IN)
    description: String
    ttl: String
}
type storage {
    storageOf: dataDisclosed @relationship(type: "has_storage", direction: IN)
    temporal: [temporal] @relationship(type: "has_temporal", direction: OUT)
    aggregationFunction: String
    legalBasisConditional: [String]
    purposeConditional: [String]
}

